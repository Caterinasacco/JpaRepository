import aQute.bnd.gradle.Bundle

plugins {
    id "biz.aQute.bnd.builder"
}

configurations {
    includeInJar {
        canBeResolved(true)
        canBeConsumed(false)
        transitive false
    }
}

dependencies {
    //OSGi
    implementation group: "org.osgi", name: "osgi.core", version: project.osgiVersion
    implementation group: "org.osgi", name: "osgi.cmpn", version: project.osgiCompendiumVersion
    //SLF4J
    implementation group: 'org.slf4j', name: 'slf4j-api', version: project.slf4jVersion
    //lombok
    implementation group: 'org.projectlombok', name: 'lombok', version: project.lombokVersion
    annotationProcessor 'org.projectlombok:lombok:' + project.lombokVersion
    //Atteo
    implementation 'org.atteo.classindex:classindex:'+project.atteoClassIndexVersion
    annotationProcessor('org.atteo.classindex:classindex:' + project.atteoClassIndexVersion)
    //javax persistence
    implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: project.jakartaPersistenceVersion
    implementation group: 'jakarta.transaction', name: 'jakarta.transaction-api', version: project.jakartaTransactionApiVersion
    //Validation
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: project.jakartaValidationVersion
    implementation group: 'it.water.repository', name: 'Repository-entity', version: project.waterVersion
    implementation group: 'it.water.repository', name: 'Repository-persistence', version: project.waterVersion
    implementation group: 'it.water.repository', name: 'Repository-service', version: project.waterVersion
    implementation group: 'it.water.distribution', name: 'Water-distribution-osgi', version: project.waterVersion
    implementation project(":JpaRepository-api")
    implementation 'org.reflections:reflections:0.9.12'

    //including hibernate since there's no compatibility with osgi at the moment
    implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: project.hibernateVersion
    implementation group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: project.hibernateAnnotationVersion
    //transaction management
    implementation group: 'org.jboss.narayana.jta', name: 'jta', version: project.jBossNarayanaJtaVersion
    implementation group: 'org.jboss', name: 'jboss-transaction-spi', version: project.jBossTransactionSpiVersion

    testImplementation group: "it.water.osgi.test.bundle", name: "Water-osgi-test-bundle", version: project.waterVersion
    testImplementation group: "it.water.osgi.test.bundle", name: "Water-osgi-test-bundle-entity", version: project.waterVersion
    testImplementation group: "org.apache.karaf.itests", name: "common", version: project.karafVersion
    testImplementation group: "org.apache.karaf", name: "apache-karaf", version: project.karafVersion
    testImplementation group: "org.apache.karaf.shell", name: "org.apache.karaf.shell.core", version: project.karafVersion
    testImplementation group: "org.ops4j.pax.exam", name: "pax-exam-container-karaf", version: project.paxExamVersion
    testImplementation group: "org.ops4j.pax.exam", name: "pax-exam-junit4", version: project.paxExamVersion
    testImplementation group: "org.ops4j.pax.exam", name: "pax-exam", version: project.paxExamVersion
}

jacocoTestReport {
    dependsOn test
    executionData fileTree(dir: "${buildDir}/jacoco", include: "*.exec")

    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        html.required = true
        csv.required = false
    }
}

jar {
    from project.configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) }
}

/**
 * Task for creating osgi bundle ready to be deployed in osgi container.
 * It creates manifest file from bnd.
 */
tasks.register("osgiBundle", Bundle) {
    from sourceSets.main.output
    //from project.configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) }
    bndfile = file("bnd.bnd")
    sourceSet = sourceSets.main
    classpath = sourceSets.main.compileClasspath
}

publishing {
    publications {
        water(MavenPublication) {
            from components.java
        }
    }
}
 